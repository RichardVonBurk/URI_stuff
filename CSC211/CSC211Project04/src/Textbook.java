/**
 * Represents a textbook that a student can read to 
 * gain knowledge about a specific topic/subject
 * @author Tim Henry
 * @version CSC211 Project 1 Solution
 * 
 */
public class Textbook
{
    
    // average weight of each page
    public final static double PAGE_WEIGHT = 0.0025;
    
    // amount of "knowledge" found on each page
    // knowledge is halved if book has already been read
    public final static int PAGE_KNOWLEDGE = 5;
    
    // subject of textbook
    // Default: Object Orient Programming
    String subject;
    
    // Number of pages in textbook
    // Default: 800 pages
    int pageCount;
    
    // Number of currently unread pages in textbook
    // Default: same as pageCount
    private int unreadPages;
     
    /**
     * Default constructor
     */
    public Textbook()
    {
        this("Object Oriented Programming", 800);
    }
    
    /**
     * Constructor to set book title/subject
     * @param bookSubject title/subject to be assigned the book
     */
    public Textbook(String bookSubject)
    {
        this(bookSubject, 800);    
    }
    
    /**
     * Constructor to set subject and page count
     * @param bookSubject title/subject to be assigned the book
     * @param bookPages number of pages in the textbook
     */
    public Textbook(String bookSubject, int bookPages)
    {
        subject = bookSubject;
        pageCount = bookPages;
        unreadPages = pageCount;       
    }
    
    /**
     * Accessor method for the subject
     * @return subject (or title) of textbook
     */
    public String getSubject()
    {
        return subject;
    }
    
    /**
     * Accessor method for number of pages in the book
     * @return total number of pages in book
     */
    public int getPageCount()
    {
        return pageCount;
    }
    
    /**
     * Accessor method for number of pages that have not been read
     * @return Count of unread pages
     */
    public int getUnreadPageCount()
    {
        return unreadPages;
    }
    
    /**
     * Accessor method for book weight
     * @return number of pages in book times the weight of each page
     */
    public double getWeight()
    {
        return pageCount * PAGE_WEIGHT;
    }
    
    /** 
     * Number of pages to read in textbook to generate knowledge </br>
     * Knowledge generated is halved if pages have already been read </br>
     * Pre-Condition: numPage is less than number of pages in textbook
     * @param numPages number of pages to read
     * @return total knowledge generated by reading the pages.
     */
    public int readPages(int numPages)
    {
        // check parameter is within a valid range
        if (numPages > pageCount)
        {
            numPages = pageCount;
        }

        // return this value
        int knowledgeGained = 0; 

        if (unreadPages == 0)
        {
            // we've already read the book so this is a review
            knowledgeGained = numPages * PAGE_KNOWLEDGE / 2;
        }
        else if (unreadPages <= numPages)
        {
            // fifrst time pages are read, we gain full knowledge
            // remaining pages are only half knowledge
            knowledgeGained = unreadPages * PAGE_KNOWLEDGE + (numPages - unreadPages) * PAGE_KNOWLEDGE / 2;
            unreadPages = 0;
        }
        else
        {
           knowledgeGained = numPages * PAGE_KNOWLEDGE;
           // we need to decrement the number of pages still unread
           unreadPages -= numPages;
        }
        return knowledgeGained;
    }    
}
